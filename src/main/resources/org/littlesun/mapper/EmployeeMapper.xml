<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.littlesun.mapper.EmployeeMapper" >
  <resultMap id="BaseResultMap" type="org.littlesun.bean.Employee" >
    <id column="employeeid" property="employeeid" jdbcType="INTEGER" />
    <result column="employeename" property="employeename" jdbcType="VARCHAR" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="departmentid" property="departmentid" jdbcType="INTEGER" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="role" property="role" jdbcType="VARCHAR" />
  </resultMap>

  <!--Employee 数据总数-->
  <!--concat(): 字符拼接函数-->
<select id="getEmpsCount" resultType="java.lang.Long">
    select count(*) from employee where employeename like concat('%',#{employeename},'%') and username like concat('%',#{username},'%') and status=#{status};
  </select>

  <!--分页操作-->
  <select id="searchEmp" resultMap="BaseResultMap">
    select * from employee where employeename like concat('%',#{employeename},'%') and username like concat('%',#{username},'%') and status=#{status} limit #{start},#{count}
  </select>

  <select id="getEmpsByStatus" resultMap="BaseResultMap">
    select * from employee where status=#{status}
  </select>

  <!--查询employee-->
  <select id="dologin" resultMap="BaseResultMap">
    select * from employee where username=#{username} and password=#{password}
  </select>

  <sql id="Base_Column_List" >
    employeeid, employeename, username, phone, email, status, departmentid, password, 
    role
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from employee
    where employeeid = #{employeeid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from employee
    where employeeid = #{employeeid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.littlesun.bean.Employee" >
    insert into employee (employeeid, employeename, username, 
      phone, email, status, 
      departmentid, password, role
      )
    values (#{employeeid,jdbcType=INTEGER}, #{employeename,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, 
      #{departmentid,jdbcType=INTEGER}, #{password,jdbcType=VARCHAR}, #{role,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.littlesun.bean.Employee" >
    insert into employee
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="employeeid != null" >
        employeeid,
      </if>
      <if test="employeename != null" >
        employeename,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="departmentid != null" >
        departmentid,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="role != null" >
        role,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="employeeid != null" >
        #{employeeid,jdbcType=INTEGER},
      </if>
      <if test="employeename != null" >
        #{employeename,jdbcType=VARCHAR},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="departmentid != null" >
        #{departmentid,jdbcType=INTEGER},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="role != null" >
        #{role,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.littlesun.bean.Employee" >
    update employee
    <set >
      <if test="employeename != null" >
        employeename = #{employeename,jdbcType=VARCHAR},
      </if>
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="departmentid != null" >
        departmentid = #{departmentid,jdbcType=INTEGER},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="role != null" >
        role = #{role,jdbcType=VARCHAR},
      </if>
    </set>
    where employeeid = #{employeeid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.littlesun.bean.Employee" >
    update employee
    set employeename = #{employeename,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      departmentid = #{departmentid,jdbcType=INTEGER},
      password = #{password,jdbcType=VARCHAR},
      role = #{role,jdbcType=VARCHAR}
    where employeeid = #{employeeid,jdbcType=INTEGER}
  </update>
</mapper>